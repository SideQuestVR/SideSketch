// Copyright 2020 The Tilt Brush Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Pose p_tiltBrush_Pose;
        
        private static SteamVR_Action_Single p_tiltBrush_RI_Trigger;
        
        private static SteamVR_Action_Vector2 p_tiltBrush_RI_Thumbstick;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_ThumbstickTouch;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_GripBinary;
        
        private static SteamVR_Action_Single p_tiltBrush_RI_GripAnalog;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_MenuButton;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_PadTouch;
        
        private static SteamVR_Action_Vector2 p_tiltBrush_RI_PadDirectional;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_PadClick;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_PrimaryButton;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_PrimaryButtonTouch;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_SecondaryButton;
        
        private static SteamVR_Action_Boolean p_tiltBrush_RI_SecondaryButtonTouch;
        
        private static SteamVR_Action_Vibration p_tiltBrush_Haptic;
        
        private static SteamVR_Action_Pose p_mixedreality_ExternalCamera;
        
        public static SteamVR_Action_Pose tiltBrush_Pose
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_Pose.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Single tiltBrush_RI_Trigger
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_Trigger.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Vector2 tiltBrush_RI_Thumbstick
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_Thumbstick.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_ThumbstickTouch
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_ThumbstickTouch.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_GripBinary
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_GripBinary.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Single tiltBrush_RI_GripAnalog
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_GripAnalog.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_MenuButton
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_MenuButton.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_PadTouch
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_PadTouch.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 tiltBrush_RI_PadDirectional
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_PadDirectional.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_PadClick
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_PadClick.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_PrimaryButton
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_PrimaryButton.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_PrimaryButtonTouch
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_PrimaryButtonTouch.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_SecondaryButton
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_SecondaryButton.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean tiltBrush_RI_SecondaryButtonTouch
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_RI_SecondaryButtonTouch.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration tiltBrush_Haptic
        {
            get
            {
                return SteamVR_Actions.p_tiltBrush_Haptic.GetCopy <SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Pose mixedreality_ExternalCamera
        {
            get
            {
                return SteamVR_Actions.p_mixedreality_ExternalCamera.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[]
            {
                    SteamVR_Actions.tiltBrush_Pose,
                    SteamVR_Actions.tiltBrush_RI_Trigger,
                    SteamVR_Actions.tiltBrush_RI_Thumbstick,
                    SteamVR_Actions.tiltBrush_RI_ThumbstickTouch,
                    SteamVR_Actions.tiltBrush_RI_GripBinary,
                    SteamVR_Actions.tiltBrush_RI_GripAnalog,
                    SteamVR_Actions.tiltBrush_RI_MenuButton,
                    SteamVR_Actions.tiltBrush_RI_PadTouch,
                    SteamVR_Actions.tiltBrush_RI_PadDirectional,
                    SteamVR_Actions.tiltBrush_RI_PadClick,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButton,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButtonTouch,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButton,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButtonTouch,
                    SteamVR_Actions.tiltBrush_Haptic,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.tiltBrush_Pose,
                    SteamVR_Actions.tiltBrush_RI_Trigger,
                    SteamVR_Actions.tiltBrush_RI_Thumbstick,
                    SteamVR_Actions.tiltBrush_RI_ThumbstickTouch,
                    SteamVR_Actions.tiltBrush_RI_GripBinary,
                    SteamVR_Actions.tiltBrush_RI_GripAnalog,
                    SteamVR_Actions.tiltBrush_RI_MenuButton,
                    SteamVR_Actions.tiltBrush_RI_PadTouch,
                    SteamVR_Actions.tiltBrush_RI_PadDirectional,
                    SteamVR_Actions.tiltBrush_RI_PadClick,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButton,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButtonTouch,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButton,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButtonTouch,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[]
            {
                    SteamVR_Actions.tiltBrush_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[]
            {
                    SteamVR_Actions.tiltBrush_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[]
            {
                    SteamVR_Actions.tiltBrush_Pose,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[]
            {
                    SteamVR_Actions.tiltBrush_RI_ThumbstickTouch,
                    SteamVR_Actions.tiltBrush_RI_GripBinary,
                    SteamVR_Actions.tiltBrush_RI_MenuButton,
                    SteamVR_Actions.tiltBrush_RI_PadTouch,
                    SteamVR_Actions.tiltBrush_RI_PadClick,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButton,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButtonTouch,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButton,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButtonTouch};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[]
            {
                    SteamVR_Actions.tiltBrush_RI_Trigger,
                    SteamVR_Actions.tiltBrush_RI_GripAnalog};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[]
            {
                    SteamVR_Actions.tiltBrush_RI_Thumbstick,
                    SteamVR_Actions.tiltBrush_RI_PadDirectional};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[0];
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.tiltBrush_RI_Trigger,
                    SteamVR_Actions.tiltBrush_RI_Thumbstick,
                    SteamVR_Actions.tiltBrush_RI_ThumbstickTouch,
                    SteamVR_Actions.tiltBrush_RI_GripBinary,
                    SteamVR_Actions.tiltBrush_RI_GripAnalog,
                    SteamVR_Actions.tiltBrush_RI_MenuButton,
                    SteamVR_Actions.tiltBrush_RI_PadTouch,
                    SteamVR_Actions.tiltBrush_RI_PadDirectional,
                    SteamVR_Actions.tiltBrush_RI_PadClick,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButton,
                    SteamVR_Actions.tiltBrush_RI_PrimaryButtonTouch,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButton,
                    SteamVR_Actions.tiltBrush_RI_SecondaryButtonTouch};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_tiltBrush_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/TiltBrush/in/Pose")));
            SteamVR_Actions.p_tiltBrush_RI_Trigger = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/TiltBrush/in/RI_Trigger")));
            SteamVR_Actions.p_tiltBrush_RI_Thumbstick = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/TiltBrush/in/RI_Thumbstick")));
            SteamVR_Actions.p_tiltBrush_RI_ThumbstickTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_ThumbstickTouch")));
            SteamVR_Actions.p_tiltBrush_RI_GripBinary = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_GripBinary")));
            SteamVR_Actions.p_tiltBrush_RI_GripAnalog = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/TiltBrush/in/RI_GripAnalog")));
            SteamVR_Actions.p_tiltBrush_RI_MenuButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_MenuButton")));
            SteamVR_Actions.p_tiltBrush_RI_PadTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_PadTouch")));
            SteamVR_Actions.p_tiltBrush_RI_PadDirectional = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/TiltBrush/in/RI_PadDirectional")));
            SteamVR_Actions.p_tiltBrush_RI_PadClick = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_PadClick")));
            SteamVR_Actions.p_tiltBrush_RI_PrimaryButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_PrimaryButton")));
            SteamVR_Actions.p_tiltBrush_RI_PrimaryButtonTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_PrimaryButtonTouch")));
            SteamVR_Actions.p_tiltBrush_RI_SecondaryButton = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_SecondaryButton")));
            SteamVR_Actions.p_tiltBrush_RI_SecondaryButtonTouch = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/TiltBrush/in/RI_SecondaryButtonTouch")));
            SteamVR_Actions.p_tiltBrush_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create <SteamVR_Action_Vibration>("/actions/TiltBrush/out/Haptic")));
            SteamVR_Actions.p_mixedreality_ExternalCamera = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/mixedreality/in/ExternalCamera")));
        }
    }
}
